@use "sass:math";
@import "constants";

@mixin vw-property($data, $second: null) {
  @if ($second) {
    #{$second}: $data * 1px;

    @include desktop() {
      $s: (math.div($data, 1920) * 100vw);
      #{$second}: calc(var(--exp) * #{$data}px);
    }
  } @else {
    @each $property, $size in $data {
      $index: str-index(#{$size}, "px");

      @if ($index) {
        #{$property}: $size;
      } @else {
        #{$property}: $size * 1px;
      }

      @debug $index;
    }

    // @include desktop() {
    @each $property, $size in $data {
      $s: math.div($size, 1920) * 100vw;
      $index: str-index(#{$size}, "px");

      @if ($index) {
        #{$property}: calc(var(--exp) * #{$size});
      } @else {
        #{$property}: calc(var(--exp) * #{$size}px);
      }
    }
  }
}

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin vw-property-big($data, $second: null) {
  @if ($second) {
    #{$second}: $data * 1px;

    @include desktop() {
      $s: (math.div($data, 1920) * 100vw);
      #{$second}: $s;
    }
  } @else {
    @each $property, $size in $data {
      #{$property}: $size * 1px;
    }

    @include desktop() {
      @each $property, $size in $data {
        $s: (math.div($size, 1920) * 100vw);
        #{$property}: $s;
      }
    }
  }
}

@mixin height($height) {
  height: #{$height}vh;
  height: calc(var(--vh, 1vh) * #{$height});
}

@function vh($height) {
  @return math.div($height, 1080) * 100vh;
}

@function vw($width) {
  @return math.div($width, 1920) * 100vw;
}

@function vw-laptop($width) {
  @return math.div($width, 1440) * 100vw;
}

@function vw-mobile($width) {
  @return math.div($width, 320) * 100vw;
}

@mixin desktop {
  @media (max-width: 1800px) {
    @content;
  }
}

@mixin laptop {
  @media (max-width: 1500px) {
    @content;
  }
}

@mixin tablet($bool: false) {
  @if ($bool) {
    @media (min-width: 1101px) {
      @content;
    }
  } @else {
    @media (max-width: 1100px) {
      @content;
    }
  }
}

@mixin mobile {
  @media (max-width: 750px) {
    @content;
  }
}

@mixin mobile-small {
  @media (max-width: 350px) {
    @content;
  }
}

@function line-height($lh, $size) {
  @if ($lh) {
    @return math.div($lh, $size) * 1;
  }

  @return 1.25;
}

@mixin size-old($size, $min: 15, $lh: $size * 1) {
  font-size: max(#{$min + "px"}, #{math.div($size, 15) * 1rem});
  line-height: line-height($lh, $size);
}

@function height($height: 100) {
  @return calc(var(--vh, 1vh) * #{$height});
}

@function size($sizeBig, $sizeSmall, $windowSizeBig: $windowBig, $windowSizeSmall: $windowSmall) {
  $x: $sizeBig - $sizeSmall;
  $k: $windowSizeBig * $sizeSmall - $windowSizeSmall * $sizeBig;
  $y: $windowSizeBig - $windowSizeSmall;

  @return calc((#{$x} * 100vw) / #{$y} + #{$k / $y}px);
}

@mixin font-size($sizeBig, $sizeSmall: $sizeBig, $windowSizeBig: $windowBig, $windowSizeSmall: $windowSmall) {
  font-size: size($sizeBig, $sizeSmall, $windowSizeBig, $windowSizeSmall);
  line-height: 1.2;
  letter-spacing: -0.015em;

  @media (max-width: #{$windowSizeSmall}px) {
    font-size: #{$sizeSmall}px;
  }

  @media (min-width: #{$windowSizeBig}px) {
    font-size: calc(#{$sizeBig}px * var(--exp) / var(--wh));
  }
}

@mixin font-size-not-scale($sizeBig, $sizeSmall: $sizeBig, $windowSizeBig: $windowBig, $windowSizeSmall: $windowSmall) {
  font-size: size($sizeBig, $sizeSmall, $windowSizeBig, $windowSizeSmall);
  line-height: 1.2;
  letter-spacing: -0.02em;

  @media (max-width: #{$windowSizeSmall}px) {
    font-size: #{$sizeSmall}px;
  }

  @media (min-width: #{$windowSizeBig}px) {
    font-size: #{$sizeBig}px;
  }
}

@mixin line-height($sizeBig, $sizeSmall: $sizeBig, $windowSizeBig: $windowBig, $windowSizeSmall: $windowSmall) {
  // font-size: size($sizeBig, $sizeSmall, $windowSizeBig, $windowSizeSmall);
  line-height: size($sizeBig, $sizeSmall, $windowSizeBig, $windowSizeSmall);
  // letter-spacing: -0.02em;
  @media (min-width: #{$windowSizeBig}px) {
    line-height: #{$sizeBig}px;
  }

  @media (max-width: #{$windowSizeSmall}px) {
    line-height: #{$sizeSmall}px;
  }
}

/**
* @Param {$name: String}
*/
@function color($name, $opacity: 1) {
  @return rgba(map-get($colors, $name), $opacity);
}

@mixin wrapper {
  padding-left: $offsetMain;
  padding-right: $offsetMain;

  @include tablet {
    padding-left: $offsetMain / 2;
    padding-right: $offsetMain / 2;
  }
}

@mixin transition($properties...) {
  $props: ();

  @each $property in $properties {
    $props: append($props, $property 0.3s ease, comma);
  }

  transition: $props;
}

@mixin aspect-ratio($arglist... /*$ratio or $width, $height*/) {
  $map: keywords($arglist);
  $height: map-get($map, height) or nth-value($arglist, 2);
  $width: map-get($map, width) or nth-value($arglist, 1);
  $ratio: map-get($map, ratio) or if($width and $height, $width/$height, nth-value($arglist, 1)) or 1;
  $padding: 1 / $ratio * 100%;
  &::before,
  &::after {
    content: "";
    display: table;
    clear: both;
    width: 1px;
    margin-left: -1px;
  }
  &::before {
    float: left;
    padding-bottom: $padding;
  }
}

// Helper function
// Return null rather than throwing an error if index is outside list range.
@function nth-value($list, $index) {
  @return if(length($list) >= $index, nth($list, $index), null);
}

@mixin spacer($attribute, $direction: all, $size: 1) {
  @if $direction == all {
    #{$attribute}: $offsetMain * $size;
  } @else if $direction == l {
    #{$attribute}-left: $offsetMain * $size;
  } @else if $direction == r {
    #{$attribute}-right: $offsetMain * $size;
  } @else if $direction == t {
    #{$attribute}-top: $offsetMain * $size;
  } @else if $direction == b {
    #{$attribute}-bottom: $offsetMain * $size;
  } @else if $direction == x {
    #{$attribute}-left: $offsetMain * $size;
    #{$attribute}-right: $offsetMain * $size;
  } @else if $direction == y {
    #{$attribute}-top: $offsetMain * $size;
    #{$attribute}-bottom: $offsetMain * $size;
  }
}

// .div {
//   @include spacer(padding);
//   @include spacer(margin);
//   @include spacer(margin, l);
//   @include spacer(margin, r);
//   @include spacer(margin, b);
//   @include spacer(margin, t);
//   @include spacer(margin, x);
//   @include spacer(margin, y);

//   @include spacer(margin, all, 1 / 4);

//   padding: 32px;
//   margin: 32px;
//   margin-left: 32px;
// }

@mixin button($width, $height, $marginLeft) {
  height: $height;
  background-color: #0e3fb5;
  color: white;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  margin-left: $marginLeft;
  border-radius: $borderRadius;
  font-weight: 600;
}
